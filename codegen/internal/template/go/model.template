// Code generated by gf-codegen. DO NOT EDIT.
// 传参结构体 model
// 生成日期：{{.table.UpdateTime}}
// 生成人：{{.table.FunctionAuthor}}

package model

import (
	"github.com/gogf/gf/v2/frame/g"
    {{if .table.HasUpFileColumn}}
    comModel "devops.gitlab.zfkunyu.com/cartsee-go/cartx-etl/app/common/model"
    {{end}}
    {{if .table.HasTimeColumn}}
    "github.com/gogf/gf/v2/os/gtime"
    {{end}}
)

// {{.table.ClassName}}ListReq 用于列表查询的查询条件参数，支持翻页和排序参数
type {{.table.ClassName}}ListReq struct {
	PageNum    uint32   `p:"pageNum" json:"pageNum,omitempty"`  //当前页码
	PageSize   uint32   `p:"pageSize" json:"pageSize,omitempty"` //每页数
	OrderBy    string   `p:"orderBy json:"orderBy,omitempty"`  //排序方式
    {{range $index, $column := .table.QueryColumns}}
    {{$column.GoField}}  {{if or (eq $column.GoType "Time") (eq $column.GoType "int") (eq $column.GoType "int64") (eq $column.GoType "uint") (eq $column.GoType "uint64") (eq $column.GoType "float") (eq $column.GoType "float64") (eq $column.GoType "bool")}}{{if eq $column.QueryType "BETWEEN"}}[]{{end}}string{{else}}{{if eq $column.QueryType "BETWEEN"}}[]{{end}}{{$column.GoType}}{{end}} `p:"{{$column.HtmlField}}"{{if ne $column.FieldValidation ""}} v:"{{$column.FieldValidation}}"{{end}} json:"{{$column.Base.HtmlField}},omitempty"` //{{$column.Comment}}
    {{end}}
}

// {{.table.ClassName}}DoListReq 用于列表查询的查询条件数据结构，支持翻页和排序参数，支持查询条件参数类型自动转换
type {{.table.ClassName}}DoListReq struct {
	g.Meta        `orm:"table:{{.table.Name}}, do:true" json:"-"`
	{{range $index, $column := .table.Columns}}
    {{$column.GoField}}    {{if eq $column.GoType "Time"}}*gtime.Time{{else}}interface{}{{end}} `json:"{{$column.HtmlField}},omitempty"` // {{$column.Comment}}
    {{end}}
	PageNum       uint32 `json:"pageNum,omitempty"`  //当前页码
	PageSize      uint32 `json:"pageSize,omitempty"` //每页数
	OrderBy       string `json:"orderBy,omitempty"`  //排序方式
}

// {{.table.ClassName}}DoOneReq 用于单一记录查询的查询条件数据结构，支持排序参数，支持查询条件参数类型自动转换
type {{.table.ClassName}}DoOneReq struct {
	g.Meta        `orm:"table:{{.table.Name}}, do:true" json:"-"`
	{{range $index, $column := .table.Columns}}
    {{$column.GoField}}    {{if eq $column.GoType "Time"}}*gtime.Time{{else}}interface{}{{end}} `json:"{{$column.HtmlField}},omitempty"` // {{$column.Comment}}
    {{end}}
	OrderBy       string `json:"orderBy,omitempty"` //排序方式
}

// {{.table.ClassName}}ListRes 分页返回结果
type {{.table.ClassName}}ListRes struct {
	Total       uint64         `json:"total,omitempty"`
	CurrentPage uint32         `json:"currentPage,omitempty"`
	List        []*{{.table.ClassName}}Item `json:"list,omitempty"`
}

// {{.table.ClassName}}Item 列表返回结果
type {{.table.ClassName}}Item struct {
  {{if eq .table.TemplateCategory "tree"}}
    {{range $index, $column := .table.Columns}}
      {{if or (eq $column.HtmlField $.table.TreeCode) (eq $column.HtmlField $.table.TreeParentCode) (eq $column.HtmlField $.table.TreeName) }}
    {{$column.GoField}}  {{if eq $column.GoType "Time"}}*gtime.Time{{else if eq $column.HtmlType "images" "file" "files"}}[]*comModel.UpFile{{else}}{{$column.GoType}}{{end}}   `json:"{{$column.HtmlField}},omitempty"`
      {{end}}
    {{end}}
    {{range $index, $column := .table.ListColumns}}
      {{if and (ne $column.HtmlField $.table.TreeCode) (ne $column.HtmlField $.table.TreeParentCode) (ne $column.HtmlField $.table.TreeName) }}
    {{$column.GoField}}  {{if eq $column.GoType "Time"}}*gtime.Time{{else if eq $column.HtmlType "images" "file" "files"}}[]*comModel.UpFile{{else}}{{$column.GoType}}{{end}}   `json:"{{$column.HtmlField}},omitempty"`
      {{end}}
    {{end}}
  {{else}}
    {{range $index, $column := .table.ListColumns}}
    {{$column.GoField}}  {{if eq $column.GoType "Time"}}*gtime.Time{{else if eq $column.HtmlType "images" "file" "files"}}[]*comModel.UpFile{{else}}{{$column.GoType}}{{end}}   `json:"{{$column.HtmlField}},omitempty"`
    {{end}}
  {{end}}
  {{range $index, $column := .table.FkColumnsNotInList}}
    {{$column.GoField}}  {{if eq $column.GoType "Time"}}*gtime.Time{{else if eq $column.HtmlType "images" "file" "files"}}[]*comModel.UpFile{{else}}{{$column.GoType}}{{end}}   `json:"{{$column.HtmlField}},omitempty"`
  {{end}}
  {{range $ti, $relatedTable := .table.RelatedTables}}
    {{$relatedTable.ClassNameWhenRelated}}   *{{$relatedTable.ClassNameWhenRelated}}  `json:"{{$relatedTable.JsonNameWhenRelated}},omitempty"`
  {{end}}
}

{{range $ti, $relatedTable := .table.RelatedTables}}
type {{$relatedTable.ClassNameWhenRelated}} struct {
	{{range $ci, $relatedColumn := $relatedTable.RefColumns.Values}}
	{{$relatedColumn.GoField}}    {{if eq $relatedColumn.GoType "Time"}}*gtime.Time{{else}}{{$relatedColumn.GoType}}{{end}}         `json:"{{$relatedColumn.HtmlField}},omitempty"`    // {{$relatedColumn.Comment}}
	{{end}}
    {{range $ti, $innerRelatedTable := $relatedTable.RelatedTables}}
    {{$innerRelatedTable.ClassNameWhenRelated}}  *{{$innerRelatedTable.ClassNameWhenRelated}}  `json:"{{$innerRelatedTable.JsonNameWhenRelated}},omitempty"`
    {{end}}
}
{{end}}

{{range $ri, $relatedTable := .table.RelatedTables}}
{{range $ii, $innerRelatedTable := $relatedTable.RelatedTables}}
type {{$innerRelatedTable.ClassNameWhenRelated}} struct {
    {{range $ci, $relatedColumn := $innerRelatedTable.RefColumns.Values}}
    {{$relatedColumn.GoField}}    {{if eq $relatedColumn.GoType "Time"}}*gtime.Time{{else}}{{$relatedColumn.GoType}}{{end}}         `json:"{{$relatedColumn.HtmlField}},omitempty"`    // {{$relatedColumn.Comment}}
    {{end}}
}
{{end}}
{{end}}

// {{.table.ClassName}}InfoReq 数据查询参数
type {{.table.ClassName}}InfoReq struct {
    Id {{.table.PkColumn.GoType}} `p:"id" json:"id,omitempty"`
}

// {{.table.ClassName}}InfoRes 数据返回结果
type {{.table.ClassName}}InfoRes struct {
    {{range $index, $column := .table.Columns}}
    {{$column.GoField}}  {{if eq $column.GoType "Time"}}*gtime.Time{{else if eq $column.HtmlType "images" "file" "files"}}[]*comModel.UpFile{{else}}{{$column.GoType}}{{end}}   `json:"{{$column.HtmlField}},omitempty"`
    {{end}}
    {{range $ti, $relatedTable := .table.RelatedTables}}
    {{$relatedTable.ClassNameWhenRelated}}   *{{$relatedTable.ClassNameWhenRelated}}  `json:"{{$relatedTable.JsonNameWhenRelated}},omitempty"`
    {{end}}
}

// {{.table.ClassName}}CreateReq 添加操作请求参数
type {{.table.ClassName}}CreateReq struct {
    {{range $index, $column := .table.AddColumns}}
    {{$column.GoField}}  {{if eq $column.GoType "Time"}}*gtime.Time{{else if eq $column.HtmlType "images" "file" "files"}}[]*comModel.UpFile{{else}}{{$column.GoType}}{{end}}   `p:"{{$column.HtmlField}}"{{if $column.Base.IsRequired}} v:"required#{{$column.Comment}}不能为空"{{end}} json:"{{$column.HtmlField}},omitempty"`
    {{end}}
}

// {{.table.ClassName}}CreateRes 添加操作返回结果
type {{.table.ClassName}}CreateRes struct {
    LastInsertId int64 `json:"lastInsertId,omitempty"`
    RowsAffected int64 `json:"rowsAffected,omitempty"`
}

// {{.table.ClassName}}UpdateReq 修改操作请求参数
type {{.table.ClassName}}UpdateReq struct {
    {{if not .table.IsPkInEdit}}
    {{.table.PkColumn.GoField}}    {{.table.PkColumn.GoType}}  `p:"{{.table.PkColumn.HtmlField}}" v:"required#主键ID不能为空" json:"{{.table.PkColumn.HtmlField}},omitempty"`
    {{end}}
    {{range $index, $column := .table.EditColumns}}
    {{$column.GoField}}  {{if eq $column.GoType "Time"}}*gtime.Time{{else if eq $column.HtmlType "images" "file" "files"}}[]*comModel.UpFile{{else}}{{$column.GoType}}{{end}} `p:"{{$column.HtmlField}}"{{if $column.Base.IsRequired}} v:"required#{{$column.Comment}}不能为空"{{end}} json:"{{$column.HtmlField}},omitempty"`
    {{end}}
}

// {{.table.ClassName}}UpdateRes 修改操作返回结果
type {{.table.ClassName}}UpdateRes struct {
    RowsAffected int64 `json:"rowsAffected,omitempty"`
}

// {{.table.ClassName}}DoReq DoCreate插入、DoUpdate修改时使用的数据结构请求，支持字段类型自动转换，支持对特定字段赋值/不赋值
type {{.table.ClassName}}DoReq struct {
	g.Meta        `orm:"table:{{.table.Name}}, do:true" json:"-"`
	{{range $index, $column := .table.Columns}}
    {{$column.GoField}}    {{if eq $column.GoType "Time"}}*gtime.Time{{else}}interface{}{{end}} `json:"{{$column.HtmlField}},omitempty"` // {{$column.Comment}}
    {{end}}
}

// {{.table.ClassName}}DeleteReq 删除操作返回结果
type {{.table.ClassName}}DeleteReq struct {
    Ids []{{.table.PkColumn.GoType}} `p:"ids" v:"required#主键ID数组不能为空" json:"ids,omitempty"`
}

// {{.table.ClassName}}DeleteRes 删除操作返回结果
type {{.table.ClassName}}DeleteRes struct {
    RowsAffected int64 `json:"rowsAffected,omitempty"`
}

{{range $index,$column:= .table.ListColumns}}
{{if and $column.IsInlineEditable}}
// {{$.table.ClassName}}Change{{$column.GoField}}Req 设置状态请求参数
type {{$.table.ClassName}}Change{{$column.GoField}}Req struct {
	{{$.table.PkColumn.GoField}}    {{$.table.PkColumn.GoType}}  `p:"{{$.table.PkColumn.HtmlField}}" v:"required#主键ID不能为空"`
	{{$column.GoField}} {{$column.GoType}}   `p:"{{$column.HtmlField}}" v:"required#{{$column.Comment}}不能为空" `json:"{{$column.HtmlField}},omitempty"`
}

// {{$.table.ClassName}}Change{{$column.GoField}}Res 设置状态返回结果
type {{$.table.ClassName}}Change{{$column.GoField}}Res struct {
    RowsAffected int64 `json:"rowsAffected,omitempty"`
}

{{end}}
{{end}}

{{if eq .table.TemplateCategory "tree"}}
// {{.table.ClassName}}GetChildrenIdsRes 获取子记录ID列表返回结果
type {{.table.ClassName}}GetChildrenIdsRes struct {
    Ids []{{.table.PkColumn.GoType}} `json:"ids" `json:"ids,omitempty"`
}
{{end}}